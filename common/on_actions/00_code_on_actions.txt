# For on_actions launched by the code itself.

# Root = Country
on_monthly_pulse_country = {
	events = {
		unable_to_enact.1
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3
	}
	effect = {
		every_character_in_exile_pool = {
			limit = {
				popularity <= 15
			}
			kill_character = yes
		}
	}
	
	# Election Events
	random_events = {
	}

	#Coup
	random_events = {
	}

}

on_yearly_pulse_country = {}

on_half_yearly_pulse_country = {}

on_five_year_pulse_country = {}

on_decade_pulse_country = {}

# Root = Character
on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
		#Gain Some Money if you're popular
		change_variable = {
			name = personal_wealth
			add = {
				value = popularity
				multiply = 10
				
				min = 0
				}
			
			}
	
	
	}
}
on_yearly_pulse_character = {}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {}

# Root = State
on_monthly_pulse_state = {}
on_half_yearly_pulse_state = {}
on_yearly_pulse_state = {}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
		
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires when a diplomatic play is started
# root = The diplomatic play that has been started
# scope:initiator = Initiator of the play
# scope:target = Target of the play
on_diplomatic_play_started = {}

# Root = Character
on_character_creation = {
	on_actions = {
	}
}

# Root = Character
on_character_death = {}

# Root = Character
on_new_ruler = {
	effect = {
		if = {
			limit = {
				owner = {
					NOT = {
						has_variable = hide_ruler_change_notification
					}
				}
			}
			post_notification = new_ruler
		}
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	

		this = {
			save_scope_as = in_default_country
		}

		every_cobelligerent_in_war = {
			post_notification = cobelligerent_in_default_notification
		}

		every_enemy_in_war = {
			post_notification = enemy_in_default_notification
		}
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {}

# Root = Country
on_country_formed = {}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {}

# Root = State
on_resource_depleted = {}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
		if = {
			limit = {
				has_variable = revolutionary_prov_gov_var
			}
			remove_variable = revolutionary_prov_gov_var
		}
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        }
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Formation
on_mobilized_army = {
	effect = {
	}
}

# Root = Formation
on_demobilized_army = {
	effect = {
	}
}

# Root = Character
on_mobilized_general = {
}

# Root = Character
on_demobilized_general = {
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				scope:notification_target = {
					is_player = yes
				}
				scope:actor = {
					is_player = no
				}
			}
			set_global_variable = achievement_mightier_than_the_sword
		}
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer = {
	effect = {
		post_proposal = proposal_reverse_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_accepted = {
	effect = {
		post_notification = reverse_sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_rejected = {
	effect = {
		post_notification = reverse_sway_offer_rejected
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand = {
	effect = {
		post_proposal = proposal_diplomatic_demand
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_accepted = {
	effect = {
		post_notification = diplomatic_demand_accepted
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_rejected = {
	effect = {
		post_notification = diplomatic_demand_rejected
	}
}

# Root = Building
on_production_method_changed = {}

# Root = owner Country of the Law
# Executed when enactment of any law begins
on_law_enactment_started = {}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is success
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is stall
on_law_checkpoint_stall = {}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
					any_supporting_character = {
						has_role = agitator
					}
				}
			}
			set_variable = achievement_vox_populi_var
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
		if = {
			limit = {
				has_global_variable = achievement_revo_needed
			}
			set_global_variable = achievement_revolutionary
		}
	}
}

on_revolution_checkpoint_reached = {}

on_secession_checkpoint_reached = {}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
on_wargoal_enforced = {
	effect = {
		set_variable = {
            name = recently_won_war
            days = 1825
            value = yes
        }
	}	
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Country (in which the company is established)
# scope:company = The company that was established
on_company_established = {
	effect = {
	}
}

# Root = Country (in which the company was disbanded)
# scope:company = The company that was disbanded
on_company_disbanded = {
	effect = {
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    } 
		    #set_variable = { #Available to use whenever needed
		    #	name = most_recent_war_opponent
		    #	value = scope:target
		    #}
		}
		scope:target = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    #set_variable = { 
		    #	name = most_recent_war_opponent
		    #	value = scope:actor
		    #}
		}
	}	
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {}

# Root = Country
on_government_reformed = {
	effect = {
		# Government Petition
		set_variable = gov_petition_coin_toss
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}				
					}
					50 = {}
				}
			}		
		}
		every_country = {
			limit = { 
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev } 
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}					
					}
					75 = {}
				}
			}
		}		
		hidden_effect = { # Should not stack the modifier
			if = { 
				limit = { has_modifier = repudiated_obligation } 
				remove_modifier = repudiated_obligation
			}			
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes			
		}		
	}
}

# Root = Character
on_character_recruitment = {}

# This on-action is triggered in cases where there is no overriding on_impose effect on a law type. In case an on_impose effect exists on the law type, this will NOT be executed.
# Root = country being imposed upon
# scope:initiator = country doing the imposition
# scope:law = law being imposed
on_impose_law = {
	effect = {
		start_enactment = scope:law.type
		post_notification = on_impose_law
	}
}

# Root = invaded country
# scope:actor = invading country
# scope:admiral = invading admiral
# scope:general = invading general
# scope:state = location state
on_naval_invasion = {
	effect = {
		post_notification = naval_invasion_against_us
	}
}

# Root = Military Formation
# scope:front = front we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_to_front_cancelled = {
	effect = {
		post_notification = formation_travel_to_front_cancelled
	}
}

# Root = Military Formation
# scope:hq = HQ we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_station_in_hq_cancelled = {
	effect = {
		post_notification = formation_travel_station_in_hq_cancelled
	}
}

# Root = Military Formation
# scope:province = Sea Node we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_deploy_to_sea_node_cancelled  = {
	effect = {
		post_notification = formation_travel_deploy_to_sea_node_cancelled
	}
}

# Root = Military Formation
# scope:formation = Formation we were tracking
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_track_formation_cancelled = {
	effect = {
		post_notification = formation_travel_track_formation_cancelled
	}
}

# Root = Military Formation
on_military_formation_created = {}
