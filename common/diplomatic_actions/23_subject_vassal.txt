vassalize = {
	requires_approval = yes
	can_use_obligations = yes
	
	unlocking_technologies = {
		diplomacy
	}

	potential = {
		is_independent = true
	
		scope:target_country = {
			is_adjacent_to_country = root
			NOR = { 
				is_country_type = decentralized 
				has_law = law_type:law_isolationism
			}
		}
	}

	possible = {
		NOT = { has_war_with = scope:target_country }
		NOT = { is_subject_of = scope:target_country }
		
		
		#var:cultural_influence >= 0.60
		
		
		
		is_junior_in_customs_union = no
		has_diplomatic_relevance = scope:target_country
		custom_tooltip = {
			text = DIPLO_ACTION_RELATIONS_CORDIAL_OR_GREATER
			scope:target_country.relations:root >= relations_threshold:cordial
		}
		is_revolutionary = no
		scope:target_country = {
			is_revolutionary = no
			NOT = { has_variable = tut_customs_union_block }
		}
		custom_tooltip = {
			text = DIPLO_ACTION_MARKET_CONNECTION_REQUIRED
			OR = {	
				AND = {
					market = { has_port = yes }
					scope:target_country.market = { has_port = yes }
				}
				market = {
					any_scope_country = {
						is_adjacent_to_country = scope:target_country
					}
				}
			}
		}			
	}

	accept_effect = {
		
		create_truce = {
			country = scope:target_country
			months = 120
		}


		if = {
			limit = {
				has_diplomatic_pact = {
					who = scope:target_country
					type = trade_agreement
				}			
			}
			remove_diplomatic_pact = {
				country = scope:target_country
				type = trade_agreement
			}			
		}
	}

	pact = {
		cost = 100
		has_junior_participant = yes
		is_two_sided_pact = no
		recipient_pays_maintenance = no
		is_customs_union = yes
		can_be_used_in_sway_offers = yes

		relations_progress_per_day = 1  # At 100, +1 relations
		relations_improvement_max = 80		
		
		subject_type = subject_type_vassal
#

		#is_about_to_auto_break = {
		#    scope:target_country.relations:root < 23 # this is: cordial + 3
		#}

		#should_auto_break = {
		#	custom_tooltip = {
		#		text = DIPLO_ACTION_RELATIONS_CORDIAL_OR_GREATER_NOT
		#
		#		# make sure to update is_about_to_auto_break when changing this:
		#		scope:target_country.relations:root < relations_threshold:cordial
		#	}
		#}

		should_invalidate = {
			OR = {
				has_war_with = scope:target_country
				is_country_type = decentralized		
			}
		}

		break_effect = {
			change_relations = { country = scope:target_country value = -30 }
			

			# AI may not take leaving their customs union well...
			hidden_effect = {
				if = {
					limit = { 
						scope:target_country.country_rank > root.country_rank
						"relations(scope:target_country)" < relations_threshold:cordial
					}	
					random_list = {
						75 = {
							scope:target_country = {
								set_secret_goal = {
									country = root
									secret_goal = dominate
								}
							}						
						}
						25 = {}
					}
				}
				else_if = {
					limit = { 
						scope:target_country.country_rank > root.country_rank
						"relations(scope:target_country)" < relations_threshold:friendly
					}	
					random_list = {
						50 = {
							scope:target_country = {
								set_secret_goal = {
									country = root
									secret_goal = dominate
								}
							}						
						}
						50 = {}
					}
				}					
			}
		}
	}

	ai = {
		check_acceptance_for_will_break = yes
		check_acceptance_for_will_propose = yes

		# This is the acceptance score for the senior part of the customs union (used for 'join customs union' action and checking )
		accept_score = {
			value = 0

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_BASE"
				value = 100
			}
			
		}

		# This is the acceptance score for the junior part of the customs union
		junior_accept_score = {
			value = 0

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_BASE"
				value = -100
			}
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_ARMY_STRENGTH"
				value = "scope:actor.ai_army_comparison(root)"
				min = -25
				max = 25
			}
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_CIVILIZATION_VALUE_DIFFERENCE"
				value = {
					value = scope:actor.var:civilization_value
					
					subtract = root.var:civilization_value
					
					min = -1
					max = 1
					
					}
				multiply = 50
			}
			
			IF = {
				limit = {
					NOT = { scope:actor.empire_sprawl_bonus_or_malus = no }
					}
				add = {
					value = scope:actor.empire_sprawl_deficit
					desc = "DIPLOMATIC_ACCEPTANCE_IMPERIAL_SPRAWL"
					multiply = 200
					multiply = -1
					}
				}
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_SIZE_OF_SPHERE"
				value = {
						every_country = {
							limit = { is_subject_of = scope:actor }
							}
					}
				multiply = -25
			}
			

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_GDP"
				value = "scope:actor.ai_gdp_comparison(root)"
				multiply = 2
				min = 0
				max = 100
			}		

			if = {
				limit = {
					"scope:actor.ai_ideological_opinion(root)" > 0
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION"
					value = "scope:actor.ai_ideological_opinion(root)"
					multiply = 0.5
					max = 20
				}					
			}
			else_if = {
				limit = {
					"scope:actor.ai_ideological_opinion(root)" < 0
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION_NEGATIVE"
					value = "scope:actor.ai_ideological_opinion(root)"
					multiply = 0.5
					min = -20
				}					
			}		

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_ATTITUDE"
				if = {
					limit = {
						has_attitude = {
							who = scope:actor
							attitude = loyal
						}
					}
					value = 40
				}
				if = {
					limit = {
						has_attitude = {
							who = scope:actor
							attitude = genial
						}
					}
					value = 30
				}				
				if = {
					limit = {
						OR = {
							has_attitude = {
								who = scope:actor
								attitude = conciliatory
							}	
							has_attitude = {
								who = scope:actor
								attitude = cooperative
							}							
						}
					}
					value = 20
				}
				if = {
					limit = {
						has_attitude = {
							who = scope:actor
							attitude = cautious
						}
					}
					value = -50
				}
				if = {
					limit = {
						OR = {
							has_attitude = {
								who = scope:actor
								attitude = protective
							}							
							has_attitude = {
								who = scope:actor
								attitude = antagonistic
							}
							has_attitude = {
								who = scope:actor
								attitude = domineering
							}
							has_attitude = {
								who = scope:actor
								attitude = belligerent
							}
							has_attitude = {
								who = scope:actor
								attitude = rebellious
							}
						}
					}
					value = -1000
				}
			}

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_RELATIONS"
				if = {
					limit = {
						"relations(scope:actor)" >= relations_threshold:amicable
						"relations(scope:actor)" < relations_threshold:friendly
					}
					value = 20
				}
				if = {
					limit = {
						"relations(scope:actor)" >= relations_threshold:friendly
					}
					value = 50
				}
			}

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_INFAMY"
				if = {
					limit = {
						"scope:actor.infamy" >= infamy_threshold:infamous
						"scope:actor.infamy" < infamy_threshold:notorious
					}
					value = -10
				}
				if = {
					limit = {
						"scope:actor.infamy" >= infamy_threshold:notorious
						"scope:actor.infamy" < infamy_threshold:pariah
					}
					value = -25
				}
				if = {
					limit = {
						"scope:actor.infamy" >= infamy_threshold:pariah
					}
					value = -50
				}
			}

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_RANK"

				if = {
					limit = { scope:actor = { country_rank = root.country_rank } }
					value = -20
				}

				if = {
					limit = { scope:actor = { country_rank < root.country_rank } }
					value = -50
				}
			}	 
		}
		
		will_break = { 
			#is_junior_in_customs_union = yes		
			OR = {
				has_attitude = {
					who = scope:target_country
					attitude = antagonistic
				}
				has_attitude = {
					who = scope:target_country
					attitude = domineering
				}
				has_attitude = {
					who = scope:target_country
					attitude = belligerent
				}
				has_attitude = {
					who = scope:target_country
					attitude = rebellious
				}
			}
		}

		propose_score = {
			value = 50
		}

		propose_break_score = {
			value = 10
		}

		use_obligation_chance = {
			value = 500
		}

		owe_obligation_chance = {
			value = 0
		}
	}
}